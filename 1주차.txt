[기계어->어셈블리어->고급언어

컴파일러의 역할 컴퓨터 간 어떠한 고급 언어로 작성되었는지 알려주는 수단

아니면 그냥 고급언어로부터 기계어로 넘기는 과정에 사용하는 언어]

컴파일러: jde

기계어: 0,1의 이진수로 구성되어 cpu가 처리할 수 있는 언어 

어셈블리어: 사실 잘 모름 기계어와 일대일로 대응됨 cmd?
 "니모닉 기호{->그나마 사람이 인식할 수 있는 언어}를 사용해서 회로적인 모습, 기계어에 대응해서 사용할 수 있게 만든, "

고급언어: c,c++,java 등등 인간이 이해하기 쉬운 언어로 이루어진 코드
"c->절차적, 순차적 현실과 비슷하게 모델링하기에는 부적합--> c++로 근데 둘다 메모리 처먹고 에러가 많이 남, 웹이 발전하면서 -->java-->장점 콜라보c#, web에서는 js

c++에는 표준, 비표준 있음
ANSI에서 표준 작성
Visual C++, Borland C++은 컴파일러 회사가 만든 비표준->호환성x


c++ 
객체지향 캡슐화-> 하나의 객체 안에 존재하는 변수를 꺼내서 사용할 수 있음 변수를 재사용할 수 있다는 그런 의미 

함수중복, 위에꺼랑 같은 느낌

클래스는 객체를 설명해주는 요소들을 모아놓은 느낌
레시피?

객체는 말그대로 하나의 객체, 예를 들면 뭐 피자 도넛 등등,
레시피를 통해 만든 음식?

캡슐화: private을 통해 외부로부터 보호
public으로 빠지면 외부에 노출 뭐 쉬운 이야기

상속: 
" common한 객체의 특성을 그대로 끌고가서 클래스 안에 넣는 것"

다형성:  오버라이딩을 사용하면 사실 같은 함수를 클래스마다 써야해서 오버라이딩을 할 필요가 없지 않을까?

"같은 함수를 사용하지만, 연산자는 같지만 각각 다른 변수가 들어가면 각자 다른 작동을 함
instance들은 다르지만 클래스는 같은 경우
각 insatance들의 결과가 다르기 때문에 overriding은 함수를 재정의한다고 볼 수 있음, 객체 사이에 차이가 있는 경우 그냥 오버라이딩하면 객체의 종류가 다양하거나 수가 많아도 간단하게 처리가능"
















